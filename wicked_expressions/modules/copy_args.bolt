from dataclasses import dataclass
import inspect
from typing import get_args, ClassVar
from types import UnionType
from bolt_expressions.node import ExpressionNode
from ./var_sources import VarSource
from ./var_types import TypeAnnotation
from ./var import Var, StaticVar, TYPE_SOURCE_MAP
from ./sources import ScoreSource, DataSource
from ./utils import logger, IndexGenerator
from ./internal_api import Scoreboard, Data
from ./var_types import Bool, qInt, Byte, Short, Int, Long, Float, Double, String, List,
                        Compound, ByteArray, IntArray, LongArray
from ./config import Config

@dataclass
class BaseCopy:
    expr: ExpressionNode

    VALID_TYPE_HINTS: ClassVar[tuple] = (
        Scoreboard, Data, Bool,
        qInt, Byte, Short, Int,
        Long, Float, Double, String,
        List, Compound, ByteArray,
        IntArray, LongArray,
    )
    def __class_getitem__(cls, item):
        if not isinstance(item, UnionType):
            cls._verify_type_hint(item)
        else:
            for type_hint in get_args(item):
                cls._verify_type_hint(type_hint)

        return cls(expr=item)

    @classmethod
    def _verify_type_hint(cls, type_hint):
        # de-inject 'Scoreboard' and 'Data'
        if issubclass(type_hint.__class__, (Scoreboard, Data)):
            type_hint = type_hint.__class__

        if not issubclass(type_hint, cls.VALID_TYPE_HINTS):
            logger.error(f"Invalid type hint '{type_hint.__name__}'")
            exit()

class Copy(BaseCopy):
    ...

class StaticCopy(BaseCopy):
    ...

class ScoreCopyIndex(IndexGenerator):
    ...

class DataCopyIndex(IndexGenerator):
    ...

def _get_params(f):
    sig = inspect.signature(f)

    params = []
    for param in sig.parameters.values():
        params.append(param)

    return params

def _modify_kwargs(kwargs: dict, params: list, func_id: int) -> list:
    # copy, then replace old values with new ones
    new_kwargs = kwargs

    # convert kwargs to args
    args = []
    for _, arg in new_kwargs.items():
        args.append(arg)

    # eval kwargs as args
    modified_args = (_modify_args(args, params, func_id))
    
    # map new args list to old kwargs dict
    for n, kwarg_name in enumerate(new_kwargs):
        new_kwargs[kwarg_name] = modified_args[n]

def _modify_args(args: tuple | list, params: list, func_id: int) -> list:
    new_args = []

    for n, arg in enumerate(args):
        param = params[n]

        if not isinstance(param.annotation, BaseCopy):
            new_args.append(arg)
            continue

        is_static = isinstance(param.annotation, StaticCopy)
        cache_key = f"{func_id}-{param.name}"

        # 'VarSource' has to be checked first,
        # as runtime variables inherit from
        # both 'ScoreSource' & 'DataSource'
        if isinstance(arg, VarSource):
            for var_type, source in TYPE_SOURCE_MAP.items():
                if not isinstance(arg, source):
                    continue

                if is_static:
                    new_args.append(StaticVar(var_type, arg, _custom_cache_key=cache_key))
                else:
                    new_args.append(Var(var_type, arg))
        elif isinstance(arg, ScoreSource):
            if is_static:
                location_index = ScoreCopyIndex(cache_key)
            else:
                location_index = ScoreCopyIndex()
            scoreholder = f"${ctx.project_id}#copy_args${location_index}"
            objective = Config.SCOREBOARD_ROOT
            source = ScoreSource(scoreholder, objective)

            source = arg
            new_args.append(source)
        elif isinstance(arg, DataSource):
            if is_static:
                location_index = DataCopyIndex(cache_key)
            else:
                location_index = DataCopyIndex()
            path = f"data.{ctx.project_id}.copy_args.{location_index}"
            target = Config.STORAGE_ROOT
            source = DataSource('storage', target, path)

            source = arg
            new_args.append(source)

    return new_args

def copy_args(f):
    def wrapper(*args, **kwargs):
        params = _get_params(f)
        func_id = id(f)
        new_args = _modify_args(args, params, func_id)
        new_kwargs = _modify_kwargs(kwargs, params, func_id)

        f(*new_args, **kwargs)

    return wrapper
