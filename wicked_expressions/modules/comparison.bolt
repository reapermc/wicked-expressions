from dataclasses import dataclass, field
from contextlib import contextmanager
from bolt_expressions import ExpressionNode
from typing import Any, ClassVar
from ./config import Config
from ./utils import raw, logger
from ./loader import load
from ./loader_components import RootLibraryScoreboard
from ./var_types import Float

@dataclass
class UniqueScoreRegister:
    id: int = 0
    holder: str = ''
    obj: str = ''

    next_id: ClassVar[int] = 0

    def __post_init__(self):
        load(RootLibraryScoreboard())
        self.id = self._generate_unique_id()
        self.holder = self._generate_fake_player(self.id)
        self.obj = Config.SCOREBOARD_ROOT

    def _generate_fake_player(self, id: int) -> str:
        return f"$binop.{ctx.project_id}.{id}"

    @classmethod
    def _generate_unique_id(cls) -> int:
        id = cls.next_id
        cls.next_id += 1
        return id

@dataclass
class ScoreRegister:
    id: str
    holder: str = ''
    obj: str = ''

    def __post_init__(self):
        self.holder = f"$binop.register.{self.id}"
        self.obj = Config.SCOREBOARD_ROOT

@dataclass
class StorageRegister:
    id: str
    _path: str = ''
    _target: str = ''
    _type: str = 'storage'

    def __post_init__(self):
        self._path = f"binop.register.{self.id}"
        self._target = Config.STORAGE_ROOT

@dataclass
class BinaryOperation:
    left: ExpressionNode
    right: Any
    outcome: UniqueScoreRegister | None = None
    inverted: bool = False

    def condition(self):
        """Overwrite this method with custom condition."""

    @contextmanager
    def store_success(self):
        """Only use this inside overwritten 'condition' methods."""

        store success score self.outcome.holder self.outcome.obj:
            yield True

    @contextmanager
    def __branch__(self):
        if not self.outcome:
            self.outcome = UniqueScoreRegister()
            self.condition()

        if not self.inverted:
            unless score self.outcome.holder self.outcome.obj matches 0:
                yield True
        else:
            if score self.outcome.holder self.outcome.obj matches 0:
                yield True

    def __not__(self):
        return self.__class__(left=self.left, right=self.right,
                              outcome=self.outcome, inverted=not self.inverted)

    @classmethod
    def provide_sources(cls, score_source, data_source, var_source):
        cls.ScoreSource = score_source
        cls.DataSource = data_source
        cls.VarSource = var_source

    @classmethod
    def _move_data_to_storage(cls, in_data, out_stge):
        if in_data._path == '':
            logger.error(f"Data source for '{in_data._target}' is missing a path")

        raw(f"data modify storage {out_stge._target} {out_stge._path} set from {in_data._type} {in_data._target} {in_data._path}")

    @classmethod
    def _convert_storage_to_score(cls, in_stge, out_score):
        # <out_score> = <in_stge>
        store result score out_score.holder out_score.obj:
            data get storage in_stge._target in_stge._path

        # if not <in_stge>: <out_score> = None
        unless data storage in_stge._target in_stge._path:
            scoreboard players reset out_score.holder out_score.obj

@dataclass
class DataExists:
    expr: ExpressionNode
    outcome: UniqueScoreRegister | None = None
    inverted: bool = False

    @contextmanager
    def store_success(self):
        store success score self.outcome.holder self.outcome.obj:
            yield True

    @contextmanager
    def __branch__(self):
        if not self.outcome:
            self.outcome = UniqueScoreRegister()
            with self.store_success():
                if self.expr._type == 'storage':
                    if data storage self.expr._target self.expr._path
                elif self.expr._type == 'entity':
                    if data entity self.expr._target self.expr._path
                elif self.expr._type == 'block':
                    if data block self.expr._target self.expr._path

        if not self.inverted:
            unless score self.outcome.holder self.outcome.obj matches 0:
                yield True
        else:
            if score self.outcome.holder self.outcome.obj matches 0:
                yield True

    def __not__(self):
        return self.__class__(
            expr=self.expr,
            outcome=self.outcome,
            inverted=not self.inverted
        )

@dataclass
class BooleanOperation:
    left: ExpressionNode
    outcome: UniqueScoreRegister | None = None
    inverted: bool = False

    @contextmanager
    def __branch__(self):
        # print(f"{self.__class__.__name__} | __branch__ | {self.inverted} | {id(self)}")
        if not self.outcome:
            self.outcome = UniqueScoreRegister()
            scoreboard players operation self.outcome.holder self.outcome.obj = self.left.holder self.left.obj

        if not self.inverted:
            unless score self.outcome.holder self.outcome.obj matches 0:
                yield True
        else:
            if score self.outcome.holder self.outcome.obj matches 0:
                yield True

    def __not__(self):
        # print(f"{self.__class__.__name__} | __not__    | {self.inverted} | {id(self)}")
        return self.__class__(left=self.left, outcome=self.outcome, inverted=not self.inverted)

class ScoreEQ(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            with self.store_success():
                if score var self.left = var self.right
        elif isinstance(self.right, self.DataSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.right, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score var self.left = reg_b.holder reg_b.obj
        else:
            with self.store_success():
                if score var self.left matches self.right

class ScoreNE(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            with self.store_success():
                unless score var self.left = var self.right
        elif isinstance(self.right, self.DataSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.right, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                unless score var self.left = reg_b.holder reg_b.obj
        else:
            with self.store_success():
                unless score var self.left matches self.right

class ScoreLT(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            with self.store_success():
                if score var self.left < var self.right
        elif isinstance(self.right, self.DataSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.right, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score var self.left < reg_b.holder reg_b.obj
        else:
            with self.store_success():
                unless score var self.left matches (self.right, None)

class ScoreGT(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            with self.store_success():
                if score var self.left > var self.right
        elif isinstance(self.right, self.DataSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.right, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score var self.left > reg_b.holder reg_b.obj
        else:
            with self.store_success():
                unless score var self.left matches (None, self.right)

class ScoreLE(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            with self.store_success():
                if score var self.left <= var self.right
        elif isinstance(self.right, self.DataSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.right, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score var self.left <= reg_b.holder reg_b.obj
        else:
            with self.store_success():
                if score var self.left matches (None, self.right)

class ScoreGE(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            with self.store_success():
                if score var self.left >= var self.right
        elif isinstance(self.right, self.DataSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.right, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score var self.left >= reg_b.holder reg_b.obj
        else:
            with self.store_success():
                if score var self.left matches (self.right, None)

class DataEQ(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.left, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score reg_b.holder reg_b.obj = var self.right
        else:
            reg_a = StorageRegister('a')
            reg_b = StorageRegister('b')
            override = ScoreRegister('c')

            self._move_data_to_storage(self.left, reg_a)

            if isinstance(self.right, self.DataSource):
                self._move_data_to_storage(self.right, reg_b)
            else:
                if isinstance(self.left, self.VarSource) and self.left._var_type == 'float':
                    data modify storage reg_b._target reg_b._path set value Float(self.right)
                else:
                    data modify storage reg_b._target reg_b._path set value self.right

            store result score override.holder override.obj:
                data modify storage reg_a._target reg_a._path set from storage reg_b._target reg_b._path

            # override = (reg_b => reg_a)
            #
            # if override == 1     # override success  => value does not exist
            # if override == 0     # override fail => value exists

            with self.store_success():
                if score override.holder override.obj matches 0

class DataNE(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.left, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                unless score reg_b.holder reg_b.obj = var self.right
        else:
            reg_a = StorageRegister('a')
            reg_b = StorageRegister('b')
            override = ScoreRegister('c')

            self._move_data_to_storage(self.left, reg_a)

            if isinstance(self.right, self.DataSource):
                self._move_data_to_storage(self.right, reg_b)
            else:
                if isinstance(self.left, self.VarSource) and self.left._var_type == 'float':
                    data modify storage reg_b._target reg_b._path set value Float(self.right)
                else:
                    data modify storage reg_b._target reg_b._path set value self.right

            store result score override.holder override.obj:
                data modify storage reg_a._target reg_a._path set from storage reg_b._target reg_b._path

            # override = (reg_b => reg_a)
            #
            # if override == 1     # override success  => value does not exist
            # if override == 0     # override fail => value exists

            with self.store_success():
                unless score override.holder override.obj matches 0

class DataLT(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.left, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score reg_b.holder reg_b.obj < var self.right
        else:
            logger.error(f"Unsupported operation type (({self.left}) < ({self.right}))")
            exit()

class DataGT(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.left, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score reg_b.holder reg_b.obj > var self.right
        else:
            logger.error(f"Unsupported operation type (({self.left}) > ({self.right}))")
            exit()

class DataLE(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.left, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score reg_b.holder reg_b.obj <= var self.right
        else:
            logger.error(f"Unsupported operation type (({self.left}) <= ({self.right}))")
            exit()

class DataGE(BinaryOperation):
    def condition(self):
        if isinstance(self.right, self.ScoreSource):
            reg_a = StorageRegister('a')
            reg_b = ScoreRegister('b')

            self._move_data_to_storage(self.left, reg_a)
            self._convert_storage_to_score(reg_a, reg_b)

            with self.store_success():
                if score reg_b.holder reg_b.obj >= var self.right
        else:
            logger.error(f"Unsupported operation type (({self.left}) >= ({self.right}))")
            exit()
