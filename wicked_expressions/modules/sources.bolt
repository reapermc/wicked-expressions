import inspect
import re
from contextlib import contextmanager
from dataclasses import dataclass, replace
import bolt_expressions.sources as be_sources
from ./raw_operation import get_expression_value, store_expression_value
from ./comparison import ScoreEQ, ScoreNE, ScoreLT, ScoreGT, ScoreLE, ScoreGE,
                         DataEQ, DataNE, DataLT, DataGT, DataLE, DataGE, DataExists,
                         BinaryOperation, BooleanOperation

@dataclass
class ScoreSource(be_sources.ScoreSource):
    def __eq__(self, other):
        if is_comparison_case():
            return ScoreEQ(self, other)
        return super().__eq__(other)

    def __ne__(self, other):
        if is_comparison_case():
            return ScoreNE(self, other)
        return super().__ne__(other)

    def __lt__(self, other):
        return ScoreLT(self, other)

    def __gt__(self, other):
        return ScoreGT(self, other)

    def __le__(self, other):
        return ScoreLE(self, other)

    def __ge__(self, other):
        return ScoreGE(self, other)

    def exists(self):
        return ScoreEQ(self, self)

    @contextmanager
    def store(self, mode='result', type='int', scale=1):
        with store_expression_value(self, mode, type, scale):
            yield True

    def get(self, scale=None):
        return get_expression_value(self, scale)

    def __rebind__(self, other):
        """
        Allows assignment of boolean expressions to scores.

        Example: `x = y >= 10`
        Result: `execute store success score $x reapermc.wicked_expressions if score $y reapermc.wicked_expressions matches 10..`
        """
        if isinstance(other, BinaryOperation):
            other.outcome = self
            other.condition()
        else:
            self._rebind(self, other)

        return self

    def __not__(self):
        """
        Negates the score. This is boolean negation, so we need to
        return an inverted boolean operation that is evaluated later.
        """
        return BooleanOperation(left=self, outcome=None, inverted=True)

    @contextmanager
    def __branch__(self):
        """
        Used when a branch is called on a score, for example:

        x = Var(qInt)
        if x:
            say "x is true"
        """
        if BooleanOperation(left=self, outcome=None, inverted=False):
            yield True

@dataclass
class DataSource(be_sources.DataSource):
    def __eq__(self, other):
        if is_comparison_case():
            return DataEQ(self, other)
        return super().__eq__(other)

    def __ne__(self, other):
        if is_comparison_case():
            return DataNE(self, other)
        return super().__ne__(other)

    def __lt__(self, other):
        return DataLT(self, other)

    def __gt__(self, other):
        return DataGT(self, other)

    def __le__(self, other):
        return DataLE(self, other)

    def __ge__(self, other):
        return DataGE(self, other)

    def exists(self):
        return DataExists(self)

    @contextmanager
    def store(self, mode='result', type='int', scale=1):
        with store_expression_value(self, mode, type, scale):
            yield True

    def get(self, scale=None):
        return get_expression_value(self, scale)

    def __rebind__(self, other):
        """
        Allows assignment of boolean expressions to data.

        Example: `x = y >= 10`
        Result: `execute store success <type> <target> <path> <nbt_type> 1 if score $y reapermc.wicked_expressions matches 10..`
        """
        if isinstance(other, BinaryOperation):
            other.outcome = self
            other.condition()
        else:
            self._rebind(self, other)

        return self

def is_comparison_case() -> bool:
    """Determines whether a comparison dunder method call was intended to compare."""

    frame = inspect.getouterframes(inspect.currentframe(), 2)[2]
    output = re.compile(r"sources.|optimizer.").search(frame.filename) == None
    # print(['   DEFAULT', 'COMPARISON'][output], '|', frame.filename)
    return output
